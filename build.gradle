ext {
    guava_core = "com.google.guava:guava:$guava_version"
    hibernate_core = "org.hibernate:hibernate-core:$hibernate_version"
    hibernate_java8 = "org.hibernate:hibernate-java8:$hibernate_version"
    hibernate_validator = "org.hibernate:hibernate-validator:$hibernate_validator_version"
    javax_persistence = "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:$javax_persistence_version"
    spring_jpa = "org.springframework.boot:spring-boot-starter-data-jpa:$spring_boot_version"
    spring_mail = "org.springframework.boot:spring-boot-starter-mail:$spring_boot_version"
    spring_security = "org.springframework.boot:spring-boot-starter-security:$spring_boot_version"
    spring_web = "org.springframework.boot:spring-boot-starter-web:$spring_boot_version"
    spring_rest_docs = "org.springframework.restdocs:spring-restdocs-mockmvc:$spring_rest_docs_version"
    spring_test = "org.springframework.boot:spring-boot-starter-test:$spring_boot_version"
    postgres_jdbc_driver = "org.postgresql:postgresql:$postgres_version"
    apache_commons_lang = "org.apache.commons:commons-lang3:$apache_commons_lang_version"
    apache_commons_collections4 = "org.apache.commons:commons-collections4:$apache_commons_collections_version"
    apache_commons_commons_beanutils = "commons-beanutils:commons-beanutils:$apache_commons_commons_beanutils_version"
    jackson = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    hsqldb = "org.hsqldb:hsqldb:$hsqldb_version"
    jjwt = "io.jsonwebtoken:jjwt:$jjwt_version"
}

allprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        testCompile hsqldb
        testCompile spring_test
    }
    configurations {
        compile.exclude group: "commons-logging"
        compile.exclude group: 'ch.qos.logback'
    }
}
apply plugin: 'pmd'
pmd {
    ignoreFailures = true
    reportsDir = file("$project.buildDir/pmd/")
    ruleSetFiles = files('/pmd-ruleset.xml')
}
task pmd(type: Pmd) {
    subprojects.each() {
        source += fileTree('/' + it.name + '/src/test/java') + fileTree('/' + it.name + '/src/main/java')
    }
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
check.doLast {
    project.tasks.getByName("pmd").execute()
}
